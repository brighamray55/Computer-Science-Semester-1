# Review Notes ################################################################

'''

Though classmethod and staticmethod are quite similar, there's a
slight difference in usage for both entities: classmethod must have a
reference to a class object as the first parameter, whereas staticmethod
can have no parameters at all.

Let's look at all that was said in real examples.

Boilerplate

Let's assume an example of a class, dealing with date information
(this is what will be our boilerplate to cook on):

class Date(object):

    day = 0
    month = 0
    year = 0

    def __init__(self, day=0, month=0, year=0):
        self.day = day
        self.month = month
        self.year = year
This class obviously could be used to store information about
certain dates (without timezone information; let's assume all dates
are presented in UTC).

Here we have __init__, a typical initializer of Python class instances,
which receives arguments as a typical instancemethod, having the first
non-optional argument (self) that holds reference to a newly created instance.

Class Method

We have some tasks that can be nicely done using classmethods.

Let's assume that we want to create a lot of Date class instances
having date information coming from outer source encoded as a string
of next format ('dd-mm-yyyy'). We have to do that in different places
of our source code in project.

So what we must do here is:

Parse a string to receive day, month and year as three integer variables
or a 3-item tuple consisting of that variable.
Instantiate Date by passing those values to initialization call.
This will look like:

day, month, year = map(int, string_date.split('-'))
date1 = Date(day, month, year)
For this purpose, C++ has such feature as overloading, but Python lacks that
feature- so here's when  classmethod applies. Lets create another
"constructor".

    @classmethod
    def from_string(cls, date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        date1 = cls(day, month, year)
        return date1

date2 = Date.from_string('11-09-2012')
Let's look more carefully at the above implementation, and review what
advantages we have here:

We've implemented date string parsing in one place and it's reusable now.
Encapsulation works fine here (if you think that you could implement
string parsing as a single function elsewhere, this solution fits OOP
paradigm far better).
cls is an object that holds class itself, not an instance of the class.
It's pretty cool because if we inherit our Date class, all children will
have from_string defined also.
Static method

What about staticmethod? It's pretty similar to classmethod but
doesn't take any obligatory parameters (like a class method or
instance method does).

Let's look at the next use case.

We have a date string that we want to validate somehow. This task
is also logically bound to Date class we've used so far, but still
doesn't require instantiation of it.

Here is where staticmethod can be useful. Let's look at the next
piece of code:

    @staticmethod
    def is_date_valid(date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        return day <= 31 and month <= 12 and year <= 3999

    # usage:
    is_date = Date.is_date_valid('11-09-2012')
So, as we can see from usage of staticmethod, we don't have any
access to what the class is- it's basically just a function, called
syntactically like a method, but without access to the object and it's
internals (fields and another methods), while classmethod does.

'''

# Source: StackSkills #########################################################

# worksheet ###################################################################

'''

13)
mt1 = MutantTracker(1)
mt2 = MUtantTracker(2)
x = mt1.count
1

14)
mt3 = MutantTracker(3)
mt4 = MutantTracker(4)
x = MutantTracker.count
4

15)
MutantTracker.reset_count()
x = MutantTracker.count
0

16)
mt5 = MutantTracker(5)
x = MutantTracker.count()
error

17)
cayman = Porshe(175)
x = cayman.is_sports_car()
Not quite
True

18)
gt3 = Porsche(195)
x = gt3.is_sports_car()
True
True

19)
malibu = Automobile()
x = malibu.is_mobile()
True

20)
malibu = Automobile()
x = malibu.is_sports_car()
True
Not quite

'''

# Custom Class With Subclass #################################################

# UML Diagram / Understand the Problem #######################################

'''

# Top Box ####################################################################

NauCourses # assume user only inputs the time of the class a specific way

# Mid Box ####################################################################

self.name
self.credits
self.startTime # use mapint to take a string with "-" seperating start and end
self.endTime
self.credits
objectList = []

# Bottom Box #################################################################

__init__(self, name, time)
__eq__(self, other)

'''

# Plan the Solution ##########################################################

class NauCourses():
    def __init__(self, name, creds, time):
        self.name = name
        self.credits = int(creds)
        self.time = time
        self.strRange = self.time.split("-")
        self.intRange = []
        for i in self.strRange:
            self.intRange.append(int(i))

    def __eq__(self, other):
        if other.intRange[0] in range(self.intRange[0], self.intRange[1]):
            return (str(False) + " " + str(other.name) + " conflicts with " + str(self.name))
        elif other.intRange[1] in range(self.intRange[0], self.intRange[1]):
            return (str(False) + " " + str(other.name) + " conflicts with " + str(self.name))
        else:
            return (str(True) + " " + str(other.name) + " does not conflict with " + str(self.name))
Cs126 = NauCourses("Cs126", "14", "10-12")
print(Cs126.credits)
Cs136 = NauCourses("Cs136", "15", "11-12")
Cs137 = NauCourses("Cs137", "16", "13-14")
print(Cs136.intRange)
print(Cs126 == Cs136)
print(Cs126 == Cs137)

=== RESTART: \\bonsai.ucc.nau.edu\B\ber98\My Documents\CS126\11-17-2016.py ===
14
[11, 12]
False Cs136 conflicts with Cs126
True Cs137 does not conflict with Cs126
>>> 